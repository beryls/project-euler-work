require "pry"
require "prime"

# Problem 15
def prob15()
  sol15 = 0
  # for this problem, every path is a permutation of 40 movements
  # 20 right, and 20 down
  # the number of possible permutations would be 40 factorial, or 40!
  factorial = 1
  for i in (1..40)
    factorial *= i
  end
  # however, we need to reduce for non-unique elements
  # since there are 20 each of r and d, some solutions would be copies
  # we can account for the copies by dividing 40! by the permutations of r and then the permutations of d
  reduction = 1
  for i in (1..20)
    reduction *= i
  end
  sol15 = factorial/(reduction**2)
  puts sol15
end

prob15()

# Problem 14
def prob14()
  sol14 = 0
  most_steps = 0
  # n => n/2 means we can rule out numbers less than 500000
  arr = []
  for i in (500000...1000000)
    if ((i.to_f-1)/3)%2 != 1
      num = i
      count_steps = 0
      puts i
      while num > 1
        count_steps += 1
        if num%2 == 0
          num /= 2
        else
          num = 3 * num + 1
        end
      end
      if count_steps > most_steps
        sol14 = i
        most_steps = count_steps
      end
    end
  end
  puts sol14
end

# Problem 13
def prob13()
  sol13 = 0
  sum = 0
  sum += 37107287533902102798797998220837590246510135740250
  sum += 46376937677490009712648124896970078050417018260538
  sum += 74324986199524741059474233309513058123726617309629
  sum += 91942213363574161572522430563301811072406154908250
  sum += 23067588207539346171171980310421047513778063246676
  sum += 89261670696623633820136378418383684178734361726757
  sum += 28112879812849979408065481931592621691275889832738
  sum += 44274228917432520321923589422876796487670272189318
  sum += 47451445736001306439091167216856844588711603153276
  sum += 70386486105843025439939619828917593665686757934951
  sum += 62176457141856560629502157223196586755079324193331
  sum += 64906352462741904929101432445813822663347944758178
  sum += 92575867718337217661963751590579239728245598838407
  sum += 58203565325359399008402633568948830189458628227828
  sum += 80181199384826282014278194139940567587151170094390
  sum += 35398664372827112653829987240784473053190104293586
  sum += 86515506006295864861532075273371959191420517255829
  sum += 71693888707715466499115593487603532921714970056938
  sum += 54370070576826684624621495650076471787294438377604
  sum += 53282654108756828443191190634694037855217779295145
  sum += 36123272525000296071075082563815656710885258350721
  sum += 45876576172410976447339110607218265236877223636045
  sum += 17423706905851860660448207621209813287860733969412
  sum += 81142660418086830619328460811191061556940512689692
  sum += 51934325451728388641918047049293215058642563049483
  sum += 62467221648435076201727918039944693004732956340691
  sum += 15732444386908125794514089057706229429197107928209
  sum += 55037687525678773091862540744969844508330393682126
  sum += 18336384825330154686196124348767681297534375946515
  sum += 80386287592878490201521685554828717201219257766954
  sum += 78182833757993103614740356856449095527097864797581
  sum += 16726320100436897842553539920931837441497806860984
  sum += 48403098129077791799088218795327364475675590848030
  sum += 87086987551392711854517078544161852424320693150332
  sum += 59959406895756536782107074926966537676326235447210
  sum += 69793950679652694742597709739166693763042633987085
  sum += 41052684708299085211399427365734116182760315001271
  sum += 65378607361501080857009149939512557028198746004375
  sum += 35829035317434717326932123578154982629742552737307
  sum += 94953759765105305946966067683156574377167401875275
  sum += 88902802571733229619176668713819931811048770190271
  sum += 25267680276078003013678680992525463401061632866526
  sum += 36270218540497705585629946580636237993140746255962
  sum += 24074486908231174977792365466257246923322810917141
  sum += 91430288197103288597806669760892938638285025333403
  sum += 34413065578016127815921815005561868836468420090470
  sum += 23053081172816430487623791969842487255036638784583
  sum += 11487696932154902810424020138335124462181441773470
  sum += 63783299490636259666498587618221225225512486764533
  sum += 67720186971698544312419572409913959008952310058822
  sum += 95548255300263520781532296796249481641953868218774
  sum += 76085327132285723110424803456124867697064507995236
  sum += 37774242535411291684276865538926205024910326572967
  sum += 23701913275725675285653248258265463092207058596522
  sum += 29798860272258331913126375147341994889534765745501
  sum += 18495701454879288984856827726077713721403798879715
  sum += 38298203783031473527721580348144513491373226651381
  sum += 34829543829199918180278916522431027392251122869539
  sum += 40957953066405232632538044100059654939159879593635
  sum += 29746152185502371307642255121183693803580388584903
  sum += 41698116222072977186158236678424689157993532961922
  sum += 62467957194401269043877107275048102390895523597457
  sum += 23189706772547915061505504953922979530901129967519
  sum += 86188088225875314529584099251203829009407770775672
  sum += 11306739708304724483816533873502340845647058077308
  sum += 82959174767140363198008187129011875491310547126581
  sum += 97623331044818386269515456334926366572897563400500
  sum += 42846280183517070527831839425882145521227251250327
  sum += 55121603546981200581762165212827652751691296897789
  sum += 32238195734329339946437501907836945765883352399886
  sum += 75506164965184775180738168837861091527357929701337
  sum += 62177842752192623401942399639168044983993173312731
  sum += 32924185707147349566916674687634660915035914677504
  sum += 99518671430235219628894890102423325116913619626622
  sum += 73267460800591547471830798392868535206946944540724
  sum += 76841822524674417161514036427982273348055556214818
  sum += 97142617910342598647204516893989422179826088076852
  sum += 87783646182799346313767754307809363333018982642090
  sum += 10848802521674670883215120185883543223812876952786
  sum += 71329612474782464538636993009049310363619763878039
  sum += 62184073572399794223406235393808339651327408011116
  sum += 66627891981488087797941876876144230030984490851411
  sum += 60661826293682836764744779239180335110989069790714
  sum += 85786944089552990653640447425576083659976645795096
  sum += 66024396409905389607120198219976047599490197230297
  sum += 64913982680032973156037120041377903785566085089252
  sum += 16730939319872750275468906903707539413042652315011
  sum += 94809377245048795150954100921645863754710598436791
  sum += 78639167021187492431995700641917969777599028300699
  sum += 15368713711936614952811305876380278410754449733078
  sum += 40789923115535562561142322423255033685442488917353
  sum += 44889911501440648020369068063960672322193204149535
  sum += 41503128880339536053299340368006977710650566631954
  sum += 81234880673210146739058568557934581403627822703280
  sum += 82616570773948327592232845941706525094512325230608
  sum += 22918802058777319719839450180888072429661980811197
  sum += 77158542502016545090413245809786882778948721859617
  sum += 72107838435069186155435662884062257473692284509516
  sum += 20849603980134001723930671666823555245252804609722
  sum += 53503534226472524250874054075591789781264330331690
  sol13 = sum.to_s.slice(0..9)
  puts sum
  puts sol13
end

# Problem 12
def prob12()
  # triangular number is (n*(n+1))/2
  sol12 = 0
  n = 1
  # if two numbers only share 1 as a factor (and numbers that differ by 1 have no other common factors):
  # the product of the number of factors for those two numbers is equal to
  # the number of factors for the product of those two numbers
  # starting factor count at 1 to account for self as a factor
  num1_factors = 1
  num2_factors = 1
  triangle_factors = 0
  while triangle_factors < 500
    # I guarantee n = 1 is not the solution, so we'll increment up here
    n += 1
    # since the triangular number is (n*(n+1))/2, we'll find whether n or n+1 is even, and divide that number by two
    if (n%2 == 0)
      x = n/2
      y = n+1
    else
      x = n
      y = (n+1)/2
    end
    for i in (1..x/2)
      if x%i == 0
        num1_factors += 1
      end
    end
    for i in (1..y/2)
      if y%i == 0
        num2_factors += 1
      end
    end
    triangle_factors = num1_factors * num2_factors
    num1_factors = 1
    num2_factors = 1
  end
  sol12 = (n*(n+1))/2
  puts sol12
end

# Problem 11
def prob11()
  sol11 = 0
  left_right = 0
  up_down = 0
  down_right = 0
  down_left = 0
  grid_string = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
  arr = grid_string.split(" ").map(&:to_i)
  for i in (0..339)
    prod = arr[i] * arr[i+20] * arr[i+40] * arr[i+60]
    if prod > sol11
      sol11 = prod
    end
  end
  for i in (0..396)
    if i % 20 < 17
      prod = arr[i] * arr[i+1] * arr[i+2] * arr[i+3]
      if prod > sol11
        sol11 = prod
      end
    end
  end
  for i in (0..336)
    if i % 20 < 17
      prod = arr[i] * arr[i+21] * arr[i+42] * arr[i+63]
      if prod > sol11
        sol11 = prod
      end
    end
  end
  for i in (0..339)
    if i % 20 > 2
      prod = arr[i] * arr[i+19] * arr[i+38] * arr[i+57]
      if prod > sol11
        sol11 = prod
      end
    end
  end
  puts sol11
end

# Problem 10
# Inefficient solution - find a better way
def prob10()
  sol10 = 2
  current_number = 3
  while current_number < 2000000
    is_prime = 1
    factor_check = 2
    while current_number >= factor_check**2 && is_prime == 1
      if current_number % factor_check == 0
        is_prime = 0
      end
      factor_check += 1
    end
    if is_prime == 1
      sol10 += current_number
      puts current_number
    end
    current_number += 2
  end
  puts sol10
end

# Problem 9
def prob9()
  sol9 = 0
  a = 0
  b = 0
  c = 0
  arr = []
  for i in (1..999)
    arr.push(i**2)
  end
  for i in (1..999)
    for j in (2..999)
      k = 1000 - i - j
      if k**2 == i**2 + j**2
        a = i
        b = j
        c = k
        sol9 = i * j * k
        puts sol9
        return
      end
    end
  end
end

# Problem 8
def prob8()
  sol8 = 0
  super_big_num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
  arr = super_big_num.to_s.split('')
  for i in (0..995)
    product = arr[i].to_i * arr[i+1].to_i * arr[i+2].to_i * arr[i+3].to_i * arr[i+4].to_i
    if product > sol8
      sol8 = product
    end
  end
  puts sol8
end

# Problem 7 again
# Taking the hard way
def prob7again()
  sol7 = 0
  current_prime_count = 2
  current_number = 3
  while current_prime_count < 10001
    is_prime = 1
    current_number += 2
    factor_check = 2
    while current_number >= factor_check**2
      if current_number % factor_check == 0
        is_prime = 0
      end
      factor_check += 1
    end
    if is_prime == 1
      current_prime_count += 1
      sol7 = current_number
    end
  end
  puts sol7
end

# Problem 7
# using the tools I have, but feels like cheating this way
def prob7()
  puts Prime.first(10001)
end

# Problem 6
def prob6()
  sol6 = 0
  sum_of_squares = 0
  for i in (1..100)
    sum_of_squares += i*i
  end
  square_of_sum = 0
  sum = 0
  for i in (1..100)
    sum += i
  end
  square_of_sum = sum * sum
  puts square_of_sum - sum_of_squares
end

# Problem 5
def prob5()
  sol5 = 1
  factor = 20
  while factor > 1
    if sol5 % factor > 0
      checknum = factor
      while checknum > 1
        if sol5 % checknum == 0 && factor % checknum == 0
          sol5 /= checknum
        end
        checknum -= 1
      end
      sol5 *= factor
    end
    factor -= 1
    puts sol5
  end
  puts "Problem 5: #{sol5}"
end

# Problem 4
def prob4()
  sol4 = 0
  firstnum = 999
  while firstnum * 999 > sol4
    secondnum = 999
    pal = 0
    while pal == 0 && secondnum >= 100
      product = firstnum * secondnum
      rev = product.to_s.reverse.to_i
      if product == rev
        pal = product
        if pal > sol4
          sol4 = pal
        end
      end
      secondnum -= 1
    end
    firstnum -= 1
  end
  puts "Problem 4: #{sol4}"
end

# Problem 3
def prob3()
  sol3 = 0
  bignum = 600851475143
  divisor = 2
  while bignum > 1
    while bignum % divisor == 0
      bignum /= divisor
      sol3 = divisor
    end
    divisor += 1
  end
  puts "Problem 3: #{sol3}"
end

# Problem 2
def prob2()
  sol2 = 0
  last = 1
  current = 1
  while current < 4000000
    if current % 2 == 0
      sol2 += current
    end
    holder = last + current
    last = current
    current = holder
  end
  puts "Problem 2: #{sol2}"
end

# Problem 1
def prob1()
  sol1 = 0
  for i in (1...1000)
    if i % 3 == 0 || i % 5 == 0
      sol1 += i
    end
  end
  puts "Problem 1: #{sol1}"
end